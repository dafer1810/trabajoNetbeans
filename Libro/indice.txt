Capitulo 1: Introducción a Git
 
 Git es un sistema de control de versiones distribuido ampliamente utilizado en el desarrollo del software. Permite a los desarrolladores rastrear 
 cambios en el código fuente a lo largo del tiempo, facilitando la colaboración en proyectos de cualquier tamaño. 
 Creado por Linus Torvalds en 2005 para gestionar el desarrollo del kernel de Linux,Git se ha convertido en una herramienta fundamental en el arsenal
 de cualquier desarrollador. 
 Una de las características clave de git es su capacidad distribuida, lo que significa que cada desarrollador tiene una copia completa del repositorio, 
 lo que permite un flujo de trabajo descentralizado y una mayor flexibilidad. Además, Git es conocido por su velocidad, eficiencia en el manejo de ramas 
 y su capacidad para realizar un seguimiento preciso de los cambios en los archivos a lo largo del tiempo.
 En esta era de desarrollo colaborativo, Git ha demostrado ser esencial al permitir a los equipos de desarrollo trabajar de manera eficiente en proyectos 
 compartidos. Al comprender los conceptos básicos de Git y su funcionamiento, los desarrolladores pueden mejorar su productividad y colaboración en cual-
 quier proyecto de software.




Capitulo 2: Flujo de trabajo básico

 1. Clonar el repositorio: El primer paso es clonar un repositorio existente desde un servidor remoto o crear uno nuevo localmente si aún no existe. Esto
 se hace utilizando el comando git clone seguido de la URL del repositorio.



 2. Realizar cambios en los archivos: Una vez que el repositorio está clonado o creado, los desarrolladores pueden realizar cambios en los archivos según
 sea necesario para el proyecto.



 3. Agregar cambios al área de preparación (staging): Antes de confirmar (commit) los cambios, es necesario agregarlos al área de preparación (staging) 
 utilizando el comando git add. Esto permite seleccionar qué cambios se incluirán en el próximo commit.



 4. Confirmar los cambios: Una vez que los cambios están en el área de preparación, se pueden confirmar con el comando git commit. Es importante incluir
 un mensaje descriptivo que explique los cambios realizados en el commit.



 5. Actualizar el repositorio remoto: Después de confirmar los cambios localmente, es común compartir esos cambios con otros colaboradores actualizando el 
 repositorio remoto. Esto se hace utilizando el comando git push, que envía los commits locales al repositorio remoto.



 6. Actualizar el repositorio local: Si otros colaboradores han realizado cambios en el repositorio remoto, es importante mantener el repositorio local act-
 ualizado. Esto se hace utilizando el comando git pull, que recupera los cambios remotos y los fusiona con el repositorio local.





Capitulo 3: Repositorios remotos

 1. Clonar un repositorio remoto: Para comenzar a trabajar con un repositorio remoto, puedes clonarlo en tu máquina local utilizando el comando git clone seguido
 de la URL del repositorio remoto. Esto creará una copia local del repositorio en tu sistema.


 
2. Agregar un repositorio remoto: Si ya tienes un repositorio local y deseas agregar un repositorio remoto, puedes hacerlo utilizando el comando git remote add.
 Esto establecerá una conexión entre tu repositorio local y el repositorio remoto.



 3. Obtener cambios del repositorio remoto: Puedes obtener los cambios más recientes del repositorio remoto utilizando el comando git pull. Esto descargará los cam-
 bios remotos y los fusionará automáticamente con tu rama local.



 4. Enviar cambios al repositorio remoto: Después de realizar cambios en tu repositorio local y confirmarlos, puedes enviar esos cambios al repositorio remoto utili-
 zando el comando git push. Esto enviará tus confirmaciones locales al servidor remoto y actualizará el estado del repositorio remoto.



 5. Ver información sobre repositorios remotos: Puedes ver información sobre los repositorios remotos asociados con tu repositorio local utilizando el comando git 
remote -v. Esto te mostrará las URL de los repositorios remotos y sus nombres, lo que puede ser útil para mantener un seguimiento de los repositorios remotos conectados a tu proyecto.